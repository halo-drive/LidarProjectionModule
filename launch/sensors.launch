<!-- Clean Sensor Launch File - Direct Namespace Configuration -->
<!-- No topic relays needed - configure drivers directly -->
<!-- Phase 2: Optimized sensor data acquisition system -->

<launch>
  <!-- Launch Arguments -->
  <arg name="enable_camera0" default="false" />
  <arg name="enable_camera1" default="false" />
  <arg name="enable_lidar0" default="true" />
  <arg name="enable_lidar1" default="true" />
  <arg name="enable_ground_extraction" default="true" />
  <arg name="debug_mode" default="true" />

  <!-- System Configuration Parameters -->
  <rosparam file="$(find lane_fusion)/config/system_config.yaml" command="load" />

  <!-- ===== USB CAMERA SECTION ===== -->
  <!-- Camera 0: Direct to /camera0/ namespace -->
  <group ns="camera0" if="$(arg enable_camera0)">
    <node name="usb_cam_node" pkg="usb_cam" type="usb_cam_node" output="screen" respawn="false">
      <param name="video_device" value="/dev/video0" />
      <param name="image_width" value="640" />
      <param name="image_height" value="480" />
      <param name="pixel_format" value="yuyv" />
      <param name="io_method" value="mmap" />
      <param name="framerate" value="30" />
      <param name="camera_frame_id" value="camera0_link" />
      <param name="camera_name" value="camera0" />
      <param name="auto_focus" value="false" />
      <param name="auto_exposure" value="true" />
      <param name="auto_white_balance" value="true" />
      <param name="camera_timeout" value="1000" />
    </node>
  </group>

  <!-- ===== VLP-16 LIDAR SECTION ===== -->
  <!-- LiDAR 0: Direct to /lidar0/ namespace -->
  <group ns="lidar0" if="$(arg enable_lidar0)">
    <node pkg="nodelet" type="nodelet" name="nodelet_manager" args="manager" output="screen"/>

    <node pkg="nodelet" type="nodelet" name="driver_nodelet"
          args="load velodyne_driver/DriverNodelet nodelet_manager" output="screen">
      <param name="device_ip" value="192.168.2.201"/>
      <param name="model" value="VLP16"/>
      <param name="port" value="2368"/>
      <param name="frame_id" value="lidar0_link"/>
      <param name="rpm" value="600"/>
    </node>

    <node pkg="nodelet" type="nodelet" name="pointcloud_nodelet"
          args="load velodyne_pointcloud/TransformNodelet nodelet_manager" output="screen">
      <param name="calibration" value="$(find velodyne_pointcloud)/params/VLP16db.yaml"/>
      <param name="min_range" value="0.4"/>
      <param name="max_range" value="100.0"/>
      <param name="frame_id" value="lidar0_link"/>
      <param name="organize_cloud" value="false"/>
      <param name="model" value="VLP16"/>
    </node>
  </group>

  <!-- LiDAR 1: Direct to /lidar1/ namespace -->
  <group ns="lidar1" if="$(arg enable_lidar1)">
    <node pkg="nodelet" type="nodelet" name="nodelet_manager" args="manager" output="screen"/>

    <node pkg="nodelet" type="nodelet" name="driver_nodelet"
          args="load velodyne_driver/DriverNodelet nodelet_manager" output="screen">
      <param name="device_ip" value="192.168.2.202"/>
      <param name="model" value="VLP16"/>
      <param name="port" value="2368"/>
      <param name="frame_id" value="lidar1_link"/>
      <param name="rpm" value="600"/>
    </node>

    <node pkg="nodelet" type="nodelet" name="pointcloud_nodelet"
          args="load velodyne_pointcloud/TransformNodelet nodelet_manager" output="screen">
      <param name="calibration" value="$(find velodyne_pointcloud)/params/VLP16db.yaml"/>
      <param name="min_range" value="0.4"/>
      <param name="max_range" value="100.0"/>
      <param name="frame_id" value="lidar1_link"/>
      <param name="organize_cloud" value="false"/>
      <param name="model" value="VLP16"/>
    </node>
  </group>

<!-- CORRECTED Ground Extraction Parameters -->
<group if="$(arg enable_ground_extraction)">
  <node name="lidar_ground_extraction_node" pkg="lane_fusion" type="lidar_ground_extraction_node" 
        output="screen" respawn="true">
    
    <!-- Frame parameters -->
    <param name="base_frame" value="base_link" />
    <param name="vlp16_puck_frame" value="lidar0_link" />
    <param name="vlp16_highres_frame" value="lidar1_link" />
    
    <!-- Topic parameters -->
    <param name="vlp16_puck_topic" value="/lidar0/velodyne_points" />
    <param name="vlp16_highres_topic" value="/lidar1/velodyne_points" />
    
    <!-- FIXED: Height parameters based on your log data -->
    <param name="filter/min_height" value="-0.5" />   <!-- 50cm below sensor -->
    <param name="filter/max_height" value="0.3" />    <!-- 30cm above sensor -->
    
    <!-- Other parameters -->
    <param name="filter/voxel_size" value="0.05" />
    <param name="filter/statistical_k" value="30" />
    <param name="filter/statistical_std_mul" value="2.0" />
    <param name="filter/min_range" value="0.5" />
    <param name="filter/max_range" value="50.0" />
    
    <param name="extraction/distance_threshold" value="0.05" />
    <param name="extraction/max_iterations" value="1000" />
    <param name="extraction/probability" value="0.99" />
    <param name="extraction/normal_z_threshold" value="0.7" />
    
    <param name="publish_merged_cloud" value="true" />
    <param name="publish_ground_visualization" value="true" />
    <param name="processing_frequency" value="10.0" />
    
  </node>
</group>



  <!-- ===== COORDINATE TRANSFORMS SECTION ===== -->
  <!-- Static Transform Publishers - Consistent naming -->

  <node pkg="tf2_ros" type="static_transform_publisher" name="base_to_camera0"
        args="0.0 0.0 0.0 0.0 0.0 0.0 base_link camera0_link"
        if="$(arg enable_camera0)" />

  <node pkg="tf2_ros" type="static_transform_publisher" name="base_to_lidar0"
        args="0.0 0.75 0.4 0.0 0.0 0.0 base_link lidar0_link"
        if="$(arg enable_lidar0)" />

  <node pkg="tf2_ros" type="static_transform_publisher" name="base_to_lidar1"
        args="0.0 -0.75 0.4 0.0 0.0 0.0 base_link lidar1_link"
        if="$(arg enable_lidar1)" />

  <!-- Camera transforms (if needed) -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="base_to_camera0"
        args="0.0 -0.1 0.0 0.0 0.0 0.0 base_link camera0_link"
        if="$(arg enable_camera0)" />

  <!-- ===== DIAGNOSTIC SECTION ===== -->
  <group if="$(arg debug_mode)">
    <node name="diagnostic_aggregator" pkg="diagnostic_aggregator" type="aggregator_node" output="screen">
      <rosparam>
        analyzers:
          sensors:
            type: diagnostic_aggregator/GenericAnalyzer
            path: Sensors
            contains: ['camera', 'lidar', 'usb_cam', 'velodyne']
      </rosparam>
    </node>
  </group>

</launch>